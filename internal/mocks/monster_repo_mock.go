// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/soerjadi/monsterdex/internal/model"
)

// MockMonsterRepository is a mock of Repository interface.
type MockMonsterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMonsterRepositoryMockRecorder
}

// MockMonsterRepositoryMockRecorder is the mock recorder for MockMonsterRepository.
type MockMonsterRepositoryMockRecorder struct {
	mock *MockMonsterRepository
}

// NewMockMonsterRepository creates a new mock instance.
func NewMockMonsterRepository(ctrl *gomock.Controller) *MockMonsterRepository {
	mock := &MockMonsterRepository{ctrl: ctrl}
	mock.recorder = &MockMonsterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonsterRepository) EXPECT() *MockMonsterRepositoryMockRecorder {
	return m.recorder
}

// CaptureMonster mocks base method.
func (m *MockMonsterRepository) CaptureMonster(ctx context.Context, req model.CaptureMonsterReq) (model.CapturedMonster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureMonster", ctx, req)
	ret0, _ := ret[0].(model.CapturedMonster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaptureMonster indicates an expected call of CaptureMonster.
func (mr *MockMonsterRepositoryMockRecorder) CaptureMonster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureMonster", reflect.TypeOf((*MockMonsterRepository)(nil).CaptureMonster), ctx, req)
}

// DeleteMonster mocks base method.
func (m *MockMonsterRepository) DeleteMonster(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonster", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonster indicates an expected call of DeleteMonster.
func (mr *MockMonsterRepositoryMockRecorder) DeleteMonster(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonster", reflect.TypeOf((*MockMonsterRepository)(nil).DeleteMonster), ctx, id)
}

// GetDetailMonster mocks base method.
func (m *MockMonsterRepository) GetDetailMonster(ctx context.Context, id, userID int64) (model.Monster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailMonster", ctx, id, userID)
	ret0, _ := ret[0].(model.Monster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailMonster indicates an expected call of GetDetailMonster.
func (mr *MockMonsterRepositoryMockRecorder) GetDetailMonster(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailMonster", reflect.TypeOf((*MockMonsterRepository)(nil).GetDetailMonster), ctx, id, userID)
}

// GetListMonster mocks base method.
func (m *MockMonsterRepository) GetListMonster(ctx context.Context, req model.MonsterListRequest, userID int64) ([]model.Monster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMonster", ctx, req, userID)
	ret0, _ := ret[0].([]model.Monster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMonster indicates an expected call of GetListMonster.
func (mr *MockMonsterRepositoryMockRecorder) GetListMonster(ctx, req, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMonster", reflect.TypeOf((*MockMonsterRepository)(nil).GetListMonster), ctx, req, userID)
}

// InsertMonster mocks base method.
func (m *MockMonsterRepository) InsertMonster(ctx context.Context, req model.MonsterRequest) (model.MonsterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMonster", ctx, req)
	ret0, _ := ret[0].(model.MonsterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMonster indicates an expected call of InsertMonster.
func (mr *MockMonsterRepositoryMockRecorder) InsertMonster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMonster", reflect.TypeOf((*MockMonsterRepository)(nil).InsertMonster), ctx, req)
}

// UpdateMonster mocks base method.
func (m *MockMonsterRepository) UpdateMonster(ctx context.Context, req model.MonsterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonster", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMonster indicates an expected call of UpdateMonster.
func (mr *MockMonsterRepositoryMockRecorder) UpdateMonster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonster", reflect.TypeOf((*MockMonsterRepository)(nil).UpdateMonster), ctx, req)
}
